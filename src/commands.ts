import { ClientEvents } from "discord.js";
import { CommandType, EventType, PluginType } from "./core/structures";
import { AnyEventPlugin, ControlPlugin, InitPlugin, Plugin } from "./types/plugin";
import { Awaitable } from "./types/handler";
import { CommandModule, CommandModuleDefs, EventModule, EventModuleDefs, InputCommand, InputEvent } from "./types/module";
import { partition } from "./core/functions";
import { filename, filePath } from "./core/module-loading";
import { fileURLToPath } from "url";
export const sernMeta = Symbol('@sern/meta')

/*
 * Generates a number based on CommandType.
 * This corresponds to an ApplicationCommandType or ComponentType
 * TextCommands are 0 as they aren't either or.
 */
function apiType(t: CommandType) {
    if(t === CommandType.Both || t === CommandType.Modal) return 1;
    return Math.log2(t) - 2;
}

/*
 * Generates an id based on CommandType.
 * A is for any ApplicationCommand. C is for any ComponentCommand
 * Then, another number generated by apiType function is appended
 */
function uniqueId(t: CommandType) {
    const appBitField = 0b000000011111;
    const am = ((appBitField & t) !== 0) ? 'A' : 'C';
    return am+apiType(t);
}
/**
 * @since 1.0.0 The wrapper function to define command modules for sern
 * @param mod
 */
export function commandModule(mod: InputCommand): CommandModule {
    const [onEvent, plugins] = partition(
        mod.plugins ?? [],
        el => (el as Plugin).type === PluginType.Control,
    );
    const path = filePath()
    const name = mod.name ?? filename(path)
    return {
        ...mod,
        name,
        onEvent,
        plugins,
        [sernMeta]: {
            id: `${name}__${uniqueId(mod.type)}`,
            fullPath: fileURLToPath(path),
        }
    } as CommandModule;
}
/**
 * @since 1.0.0
 * The wrapper function to define event modules for sern
 * @param mod
 */
export function eventModule(mod: InputEvent): EventModule {
    const [onEvent, plugins] = partition(
        mod.plugins ?? [],
        el => (el as Plugin).type === PluginType.Control,
    );
    const path = filePath();
    return {
        ...mod,
        name: mod.name ?? filename(path), 
        onEvent,
        plugins,
        [sernMeta]: {
            id: 'string'
        }
    } as EventModule;
}

/**
 * Create event modules from discord.js client events,
 * This is an {@link eventModule} for discord events,
 * where typings can be very bad.
 * @param mod
 */
export function discordEvent<T extends keyof ClientEvents>(mod: {
    name: T;
    plugins?: AnyEventPlugin[];
    execute: (...args: ClientEvents[T]) => Awaitable<unknown>;
}) {
    return eventModule({ type: EventType.Discord, ...mod });
}


/**
 * @Experimental
 * Will be refactored / changed in future
 */
export abstract class CommandExecutable<Type extends CommandType> {
    abstract type: Type;
    plugins: InitPlugin[] = [];
    onEvent: ControlPlugin[] = [];
    abstract execute: CommandModuleDefs[Type]['execute'];
}
/**
 * @Experimental
 * Will be refactored in future
 */
export abstract class EventExecutable<Type extends EventType> {
    abstract type: Type;
    plugins: InitPlugin[] = [];
    onEvent: ControlPlugin[] = [];
    abstract execute: EventModuleDefs[Type]['execute'];
}
