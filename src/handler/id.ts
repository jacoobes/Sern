import { Interaction, InteractionType } from 'discord.js';
import { CommandType, EventType } from '../core';

/**
 * Construct unique ID for a given interaction object.
 * @param event The interaction object for which to create an ID.
 * @returns A unique string ID based on the type and properties of the interaction object.
 */
export function reconstructId<T extends Interaction>(event: T) {
    switch (event.type) {
        case InteractionType.MessageComponent: {
            return `${event.customId}_C${event.componentType}`;
        }
        case InteractionType.ApplicationCommand:
        case InteractionType.ApplicationCommandAutocomplete: {
            return `${event.commandName}_A${event.commandType}`;
        }
        case InteractionType.ModalSubmit: {
            return `${event.customId}_C1`;
        }
    }
}

const appBitField = 0b000000011111;
/*
 * Generates a number based on CommandType.
 * This corresponds to an ApplicationCommandType or ComponentType
 * TextCommands are 0 as they aren't either or.
 */
function apiType(t: CommandType | EventType) {
    if (t === CommandType.Both || t === CommandType.Modal) return 1;
    const log = Math.log2(t);
    return (appBitField & t) !== 0 ? log : log - 2;
}

/*
 * Generates an id based on CommandType.
 * A is for any ApplicationCommand. C is for any ComponentCommand
 * Then, another number generated by apiType function is appended
 */
export function uniqueSuffix(t: CommandType | EventType) {
    const am = (appBitField & t) !== 0 ? 'A' : 'C';
    return am + apiType(t);
}


export function createId(name: string, type: CommandType | EventType) {
    return name+"_"+uniqueSuffix(type)
}
